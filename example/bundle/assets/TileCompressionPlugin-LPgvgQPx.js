import{k as S,x as w,ai as z,i as M}from"./three.module-DpclfMcJ.js";const I=new S;function A(t,o){if(t.isInterleavedBufferAttribute||t.array instanceof o)return t;const f=o===Int8Array||o===Int16Array||o===Int32Array?-1:0,s=new o(t.count*t.itemSize),y=new z(s,t.itemSize,!0),d=t.itemSize,v=t.count;for(let c=0;c<v;c++)for(let i=0;i<d;i++){const u=M.clamp(t.getComponent(c,i),f,1);y.setComponent(c,i,u)}return y}function B(t,o=Int16Array){const g=t.geometry,f=g.attributes,s=f.position;if(s.isInterleavedBufferAttribute||s.array instanceof o)return s;const y=new o(s.count*s.itemSize),d=new z(y,s.itemSize,!1),v=s.itemSize,c=s.count;g.computeBoundingBox();const i=g.boundingBox,{min:u,max:x}=i,r=2**(8*o.BYTES_PER_ELEMENT-1)-1,a=-r;for(let n=0;n<c;n++)for(let e=0;e<v;e++){const m=e===0?"x":e===1?"y":"z",l=u[m],p=x[m],b=M.mapLinear(s.getComponent(n,e),l,p,a,r);d.setComponent(n,e,b)}i.getCenter(I),t.position.add(I),t.scale.x*=.5*(x.x-u.x)/r,t.scale.y*=.5*(x.y-u.y)/r,t.scale.z*=.5*(x.z-u.z)/r,f.position=d,t.geometry.boundingBox=null,t.geometry.boundingSphere=null,t.updateMatrixWorld()}class V{constructor(o){this._options={generateNormals:!1,disableMipmaps:!0,compressIndex:!0,compressNormals:!0,compressUvs:!0,compressPosition:!1,uvType:Int8Array,normalType:Int8Array,positionType:Int16Array,...o}}processTileModel(o,g){const{generateNormals:f,disableMipmaps:s,compressIndex:y,compressUvs:d,compressNormals:v,compressPosition:c,uvType:i,normalType:u,positionType:x}=this._options;o.traverse(r=>{if(r.material&&s){const a=r.material;for(const n in a){const e=a[n];e&&e.isTexture&&e.generateMipmaps&&(e.generateMipmaps=!1,e.minFilter=w)}}if(r.geometry){const a=r.geometry,n=a.attributes;if(d){const{uv:e,uv1:m,uv2:l,uv3:p}=n;e&&(n.uv=A(e,i)),m&&(n.uv1=A(m,i)),l&&(n.uv2=A(l,i)),p&&(n.uv3=A(p,i))}if(f&&!n.normals&&a.computeVertexNormals(),v&&n.normals&&(n.normals=A(n.normals,u)),c&&B(r,x),y&&a.index){const e=n.position.count,m=a.index,l=e>65535?Uint32Array:e>255?Uint16Array:Uint8Array;if(!(m.array instanceof l)){const p=new l(a.index.count);p.set(m.array);const b=new z(p,1);a.setIndex(b)}}}})}}export{V as T};
