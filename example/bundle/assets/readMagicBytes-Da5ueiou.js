const y=new TextDecoder;function I(i){return y.decode(i)}function f(i,e,t,s,a,r){let n;switch(s){case"SCALAR":n=1;break;case"VEC2":n=2;break;case"VEC3":n=3;break;case"VEC4":n=4;break;default:throw new Error(`FeatureTable : Feature type not provided for "${r}".`)}let c;const o=t*n;switch(a){case"BYTE":c=new Int8Array(i,e,o);break;case"UNSIGNED_BYTE":c=new Uint8Array(i,e,o);break;case"SHORT":c=new Int16Array(i,e,o);break;case"UNSIGNED_SHORT":c=new Uint16Array(i,e,o);break;case"INT":c=new Int32Array(i,e,o);break;case"UNSIGNED_INT":c=new Uint32Array(i,e,o);break;case"FLOAT":c=new Float32Array(i,e,o);break;case"DOUBLE":c=new Float64Array(i,e,o);break;default:throw new Error(`FeatureTable : Feature component type not provided for "${r}".`)}return c}class T{constructor(e,t,s,a){this.buffer=e,this.binOffset=t+s,this.binLength=a;let r=null;if(s!==0){const n=new Uint8Array(e,t,s);r=JSON.parse(I(n))}else r={};this.header=r}getKeys(){return Object.keys(this.header)}getData(e,t,s=null,a=null){const r=this.header;if(!(e in r))return null;const n=r[e];if(n instanceof Object){if(Array.isArray(n))return n;{const{buffer:c,binOffset:o,binLength:h}=this,l=n.byteOffset||0,p=n.type||a,b=n.componentType||s;if("type"in n&&a&&n.type!==a)throw new Error("FeatureTable: Specified type does not match expected type.");const u=o+l,d=f(c,u,t,p,b,e);if(u+d.byteLength>o+h)throw new Error("FeatureTable: Feature data read outside binary body length.");return d}}else return n}getBuffer(e,t){const{buffer:s,binOffset:a}=this;return s.slice(a+e,a+e+t)}}class g{constructor(e){this.batchTable=e;const t=e.header.extensions["3DTILES_batch_table_hierarchy"];this.classes=t.classes;for(const a of this.classes){const r=a.instances;for(const n in r)a.instances[n]=this._parseProperty(r[n],a.length,n)}if(this.instancesLength=t.instancesLength,this.classIds=this._parseProperty(t.classIds,this.instancesLength,"classIds"),t.parentCounts?this.parentCounts=this._parseProperty(t.parentCounts,this.instancesLength,"parentCounts"):this.parentCounts=new Array(this.instancesLength).fill(1),t.parentIds){const a=this.parentCounts.reduce((r,n)=>r+n,0);this.parentIds=this._parseProperty(t.parentIds,a,"parentIds")}else this.parentIds=null;this.instancesIds=[];const s={};for(const a of this.classIds)s[a]=s[a]??0,this.instancesIds.push(s[a]),s[a]++}_parseProperty(e,t,s){if(Array.isArray(e))return e;{const{buffer:a,binOffset:r}=this.batchTable,n=e.byteOffset,c=e.componentType||"UNSIGNED_SHORT",o=r+n;return f(a,o,t,"SCALAR",c,s)}}getDataFromId(e,t={}){const s=this.parentCounts[e];if(this.parentIds&&s>0){let o=0;for(let h=0;h<e;h++)o+=this.parentCounts[h];for(let h=0;h<s;h++){const l=this.parentIds[o+h];l!==e&&this.getDataFromId(l,t)}}const a=this.classIds[e],r=this.classes[a].instances,n=this.classes[a].name,c=this.instancesIds[e];for(const o in r)t[n]=t[n]||{},t[n][o]=r[o][c];return t}}class D extends T{get batchSize(){return console.warn("BatchTable.batchSize has been deprecated and replaced with BatchTable.count."),this.count}constructor(e,t,s,a,r){super(e,s,a,r),this.count=t,this.extensions={};const n=this.header.extensions;n&&n["3DTILES_batch_table_hierarchy"]&&(this.extensions["3DTILES_batch_table_hierarchy"]=new g(this))}getData(e,t=null,s=null){return console.warn("BatchTable: BatchTable.getData is deprecated. Use BatchTable.getDataFromId to get allproperties for an id or BatchTable.getPropertyArray for getting an array of value for a property."),super.getData(e,this.count,t,s)}getDataFromId(e,t={}){if(e<0||e>=this.count)throw new Error(`BatchTable: id value "${e}" out of bounds for "${this.count}" features number.`);for(const s of this.getKeys())s!=="extensions"&&(t[s]=super.getData(s,this.count)[e]);for(const s in this.extensions){const a=this.extensions[s];a.getDataFromId instanceof Function&&(t[s]=t[s]||{},a.getDataFromId(e,t[s]))}return t}getPropertyArray(e){return super.getData(e,this.count)}}function A(i){let e;if(i instanceof DataView?e=i:e=new DataView(i),String.fromCharCode(e.getUint8(0))==="{")return null;let t="";for(let s=0;s<4;s++)t+=String.fromCharCode(e.getUint8(s));return t}export{D as B,T as F,I as a,A as r};
